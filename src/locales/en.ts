export const en = {
  common: {
    appName: "opcode",
    language: "Language",
    cancel: "Cancel",
    save: "Save",
    loading: "Loading...",
    back: "Back",
    confirm: "Confirm",
    open: "Open",
    close: "Close",
    retry: "Retry",
    delete: "Delete",
    edit: "Edit",
    create: "Create",
    import: "Import",
    export: "Export",
    execute: "Execute",
    stop: "Stop",
    refresh: "Refresh",
    next: "Next",
    previous: "Previous",
    search: "Search",
    filter: "Filter",
    reset: "Reset",
    apply: "Apply",
    enable: "Enable",
    disable: "Disable",
    yes: "Yes",
    no: "No",
    ok: "OK",
    unknown: "Unknown",
    none: "None",
    all: "All",
    auto: "Auto",
    manual: "Manual",
    required: "Required",
    optional: "Optional",
    fullscreen: "Fullscreen",
    configuration: "Configuration",
    systemPrompt: "System Prompt",
    project: "Project Settings",
    local: "Local Settings",
    agent: "Agent",
    noOutputAvailable: "No output available yet",
    confirmNavigation: "An agent is currently running. If you navigate away, the agent will continue running in the background. You can view running sessions in the 'Running Sessions' tab within CC Agents.\\n\\nDo you want to continue?",
    copy: "Copy",
    copyAsJsonl: "Copy as JSONL",
    copyAsMarkdown: "Copy as Markdown",
    enterFullscreen: "Enter fullscreen",
    exitFullscreen: "Exit fullscreen",
    dropImages: "Drop images here...",
    refreshOutput: "Refresh output",
    stopExecution: "Stop execution",
    escToInterrupt: "(esc to interrupt)",
    copyMessageMarkdown: "Copy message (Markdown)",
    tokensInOut: "Tokens: {{in}} in, {{out}} out",
    autoContinue: "Auto-continue",
    autoContinueOn: "Auto-continue",
    autoContinueOff: "Auto-continue",
    maxSteps: "Max steps (0 = unlimited)",
    progress: "Progress",
    resetCounter: "Reset Counter",
    delayMs: "Delay (ms)",
    copyConversation: "Copy conversation",
    expandQueue: "Expand queue",
    collapseQueue: "Collapse queue",
    scrollToTop: "Scroll to top",
    scrollToBottom: "Scroll to bottom",
    sessionTimeline: "Session Timeline",
    adjustChatZoom: "Adjust chat zoom",
    showOutline: "Show outline",
    hideOutline: "Hide outline",
    noOutlineAvailable: "No outline available",
    showToolCalls: "Show tool calls",
    hideToolCalls: "Hide tool calls",
    autoContinueText: "Auto-continue text",
  },
  projects: {
    title: "Projects",
  },
  onboarding: {
    welcomeTitle: "Projects",
    welcomeSubtitle: "Select a project to start working with Claude Code",
    openProject: "Open Project",
    viewAll: "View all ({{count}})",
    viewLess: "View less",
    emptyProjects: "No projects found. Connect to your Claude workspace to get started.",
    recentProjects: "Recent Projects",
    prevPage: "Previous page",
    nextPage: "Next page",
    emptyProjectsTitle: "No recent projects",
    emptyProjectsDescription: "Open a project to get started with Claude Code",
    emptyProjectsAction: "Open Your First Project",
  },
  settings: {
    title: "Settings",
    subtitle: "Configure Claude Code preferences",
    saving: "Saving...",
    saveButton: "Save Settings",
    languageSection: {
      title: "Language",
      description: "Choose the language for the interface",
      system: "Follow system",
    },
    tabs: {
      general: "General",
      permissions: "Permissions",
      environment: "Environment",
      advanced: "Advanced",
      hooks: "Hooks",
      commands: "Commands",
      storage: "Storage",
      proxy: "Proxy",
    },
    general: {
      title: "General Settings",
      themeLabel: "Theme",
      themeDescription: "Choose your preferred color theme",
      themeOptions: {
        dark: "Dark",
        gray: "Gray",
        light: "Light",
      custom: "Custom",
    },
    claudeBinary: {
      title: "Claude CLI Path",
      description: "Set the absolute path to the Claude Code CLI executable. If unset, opcode will auto-detect the best available installation.",
      currentPath: "Current",
      autoDetect: "Auto-detect (not set)",
      detectSelect: "Detect & Select",
      manualPathLabel: "Manual path",
      manualPathPlaceholder: "Absolute path to claude executable (e.g., /usr/local/bin/claude)",
      browse: "Browse",
      apply: "Apply",
      saved: "Claude CLI path saved.",
      saveFailed: "Failed to save CLI path",
      selectOrEnterPath: "Please select or enter a valid path first.",
      examplesTitle: "Examples",
      osWindows: "Windows",
      osMac: "macOS",
      osLinux: "Linux",
      windowsUser: "<UserName>",
      note: "Note: Provide the full executable file path (not just a directory). On Windows, point to claude.exe; on macOS/Linux, to 'claude'."
    },
    customColorsTitle: "Custom Theme Colors",
    customColorsHint: "Use CSS color values (hex, rgb, oklch, etc.). Changes apply immediately.",
    titlebarControls: {
      label: "Window controls",
      description: "Choose where to place the window control buttons",
      mac: "Left (macOS)",
      windows: "Right (Windows)",
      saved: "Titlebar controls updated",
      saveFailed: "Failed to update titlebar controls",
    },
      includeCoAuthor: "Include 'Co-authored by Claude'",
      includeCoAuthorDesc: "Add Claude attribution to git commits and pull requests",
      verboseOutput: "Verbose Output",
      verboseOutputDesc: "Show full bash and command outputs",
      chatRetention: "Chat Transcript Retention (days)",
      chatRetentionDesc: "How long to retain chat transcripts locally (default: 30 days)",
      changesWarning: "Changes will be applied when you save settings.",
      enableAnalytics: "Enable Analytics",
      enableAnalyticsDesc: "Help improve opcode by sharing anonymous usage data",
      analyticsEnabled: "Analytics enabled",
      analyticsDisabled: "Analytics disabled",
      rememberTabs: "Remember Open Tabs",
      rememberTabsDesc: "Restore your tabs when you restart the app",
      showWelcome: "Show Welcome Intro on Startup",
      showWelcomeDesc: "Display a brief welcome animation when the app launches",
    },
    permissions: {
      title: "Permission Rules",
      description: "Control which tools Claude Code can use without manual approval",
      allowRules: "Allow Rules",
      denyRules: "Deny Rules",
      addRule: "Add Rule",
      noAllowRules: "No allow rules configured. Claude will ask for approval for all tools.",
      noDenyRules: "No deny rules configured.",
    },
    environment: {
      title: "Environment Variables",
      description: "Environment variables applied to every Claude Code session",
      addVariable: "Add Variable",
      noVariables: "No environment variables configured.",
      keyPlaceholder: "Variable name",
      valuePlaceholder: "Variable value",
    },
    advanced: {
      title: "Advanced Settings",
      description: "Additional configuration options for advanced users",
      apiKeyHelper: "API Key Helper Script",
      apiKeyHelperDesc: "Custom script to generate auth values for API requests",
      rawSettings: "Raw Settings (JSON)",
      rawSettingsDesc: "This shows the raw JSON that will be saved to ~/.claude/settings.json",
    },
    toast: {
      languageSaved: "Language preference saved",
      languageSaveFailed: "Failed to save language preference",
      settingsSaved: "Settings saved successfully!",
      settingsSaveFailed: "Failed to save settings",
      tabPersistenceEnabled: "Tab persistence enabled - your tabs will be restored on restart",
      tabPersistenceDisabled: "Tab persistence disabled",
      welcomeIntroEnabled: "Welcome intro enabled",
      welcomeIntroDisabled: "Welcome intro disabled",
      loadFailed: "Failed to load settings. Please ensure ~/.claude directory exists.",
    },
    hooks: {
      userHooks: "User Hooks",
      userHooksDesc: "Configure hooks that apply to all Claude Code sessions for your user account. These are stored in",
      hooksConfiguration: "Hooks Configuration",
      hooksConfigurationDesc: "Configure shell commands to execute at various points in Claude Code's lifecycle.",
      preToolUse: "Pre Tool Use",
      postToolUse: "Post Tool Use",
      notification: "Notification",
      stop: "Stop",
      subagentStop: "Subagent Stop",
      preToolUseDesc: "Runs before tool calls, can block and provide feedback",
      postToolUseDesc: "Runs after successful tool completion",
      notificationDesc: "Customizes notifications when Claude needs attention",
      stopDesc: "Runs when Claude finishes responding",
      subagentStopDesc: "Runs when a Claude subagent (Task) finishes",
      noHooksConfigured: "No hooks configured for this event",
      addHook: "Add Hook",
      userScope: "User Scope",
      templates: "Templates",
      loadingConfig: "Loading hooks configuration...",
      pattern: "Pattern",
      patternTooltip: "Tool name pattern (regex supported). Leave empty to match all tools.",
      patternPlaceholder: "e.g., Bash, Edit|Write, mcp__.*",
      commonPatterns: "Common patterns",
      commands: "Commands",
      addCommand: "Add Command",
      noCommandsYet: "No commands added yet",
      commandPlaceholder: "Enter shell command...",
      seconds: "seconds",
      addAnother: "Add Another",
      matcher: "Matcher",
      command: "Command",
      validationErrors: "Validation Errors:",
      securityWarnings: "Security Warnings:",
      unsavedChanges: "You have unsaved changes. Click Save to persist them.",
      notCommitted: "These settings are not committed to version control.",
      projectScope: "Project",
      localScope: "Local",
      custom: "Custom",
      hookTemplates: "Hook Templates",
      templateDialogDesc: "Choose a pre-configured hook template to get started quickly"
    },
    proxy: {
      title: "Proxy Settings",
      subtitle: "Configure proxy settings for Claude API requests",
      enableProxy: "Enable Proxy",
      enableProxyDesc: "Use proxy for all Claude API requests",
      httpProxy: "HTTP Proxy",
      httpsProxy: "HTTPS Proxy",
      noProxy: "No Proxy",
      noProxyDesc: "Comma-separated list of hosts that should bypass the proxy",
      allProxy: "All Proxy (Optional)",
      allProxyDesc: "Proxy URL to use for all protocols if protocol-specific proxies are not set",
      messages: {
        saveSuccess: "Proxy settings saved and applied successfully.",
        saveFailed: "Failed to save proxy settings",
        loadFailed: "Failed to load proxy settings",
      },
    },
    storage: {
      title: "Database Storage",
      sqlQuery: "SQL Query",
      resetDB: "Reset DB",
      selectTable: "Select a table",
      searchInTable: "Search in table...",
      newRow: "New Row",
      actions: "Actions",
      showing: "Showing {{start}} to {{end}} of {{total}} rows",
      previous: "Previous",
      next: "Next",
      page: "Page {{current}} of {{total}}",
      rows: "rows",
      editRow: "Edit Row",
      editRowDesc: "Update the values for this row in the {{table}} table.",
      primaryKey: "(Primary Key)",
      required: "(Required)",
      type: "Type",
      default: "Default",
      newRowTitle: "New Row",
      newRowDesc: "Add a new row to the {{table}} table.",
      deleteRow: "Delete Row",
      deleteRowDesc: "Are you sure you want to delete this row? This action cannot be undone.",
      resetDatabase: "Reset Database",
      resetDatabaseDesc: "This will delete all data and recreate the database with its default structure (empty tables for agents, agent_runs, and app_settings). The database will be restored to the same state as when you first installed the app. This action cannot be undone.",
      resetWarning: "All your agents, runs, and settings will be permanently deleted!",
      sqlEditor: "SQL Query Editor",
      sqlEditorDesc: "Execute raw SQL queries on the database. Use with caution.",
      sqlQueryLabel: "SQL Query",
      execute: "Execute",
      queryExecuted: "Query executed successfully. {{affected}} rows affected.",
      lastInsertId: "Last insert ID: {{id}}",
      cancel: "Cancel",
      update: "Update",
      insert: "Insert",
      delete: "Delete",
      close: "Close",
      loadTablesError: "Failed to load tables",
      loadDataError: "Failed to load table data",
      updateRowError: "Failed to update row",
      deleteRowError: "Failed to delete row",
      insertRowError: "Failed to insert row",
      resetDatabaseError: "Failed to reset database",
      resetSuccess: "Database Reset Complete: The database has been restored to its default state with empty tables (agents, agent_runs, app_settings).",
      resetFailed: "Reset Failed: Failed to reset the database. Please try again.",
      sqlExecuteError: "Failed to execute SQL",
    },
    commands: {
      title: "Slash Commands",
      projectTitle: "Project Slash Commands",
      subtitle: "Create custom commands to streamline your workflow",
      projectSubtitle: "Create custom commands for this project",
      newCommand: "New Command",
      searchCommands: "Search commands...",
      allCommands: "All Commands",
      project: "Project",
      user: "User",
      noCommands: "No commands found",
      noProjectCommands: "No project commands created yet",
      noCommandsCreated: "No commands created yet",
      createFirst: "Create your first command",
      createFirstProject: "Create your first project command",
      arguments: "Arguments",
      bash: "Bash",
      files: "Files",
      tools: "tool",
      toolsPlural: "tools",
      hideContent: "Hide content",
      showContent: "Show content",
      editCommand: "Edit Command",
      createNewCommand: "Create New Command",
      scope: "Scope",
      userGlobal: "User (Global)",
      userScope: "Available across all projects",
      projectScope: "Only available in this project",
      commandName: "Command Name",
      commandNamePlaceholder: "e.g., review, fix-issue",
      namespace: "Namespace (Optional)",
      namespacePlaceholder: "e.g., frontend, backend",
      description: "Description (Optional)",
      descriptionPlaceholder: "Brief description of what this command does",
      commandContent: "Command Content",
      contentPlaceholder: "Enter the prompt content. Use $ARGUMENTS for dynamic values.",
      contentHelp: "Use $ARGUMENTS for user input, @filename for files, and !`command` for bash commands",
      allowedTools: "Allowed Tools",
      allowedToolsHelp: "Select which tools Claude can use with this command",
      examples: "Examples",
      preview: "Preview",
      deleteCommand: "Delete Command",
      deleteConfirm: "Are you sure you want to delete this command?",
      deleteWarning: "This action cannot be undone. The command file will be permanently deleted.",
      cancel: "Cancel",
      save: "Save",
      saving: "Saving...",
      delete: "Delete",
      deleting: "Deleting...",
      projectCommands: "Project Commands",
      userCommands: "User Commands",
      loadError: "Failed to load commands",
      saveError: "Failed to save command",
      deleteError: "Failed to delete command",
    },
  },
  agents: {
    title: "CC Agents",
    subtitle: "Manage your Claude Code agents",
    createAgent: "Create CC Agent",
    importFromFile: "From File",
    importFromGitHub: "From GitHub",
    noAgentsTitle: "No agents yet",
    noAgentsDescription: "Create your first CC Agent to get started",
    recentExecutions: "Recent Executions",

    // Agent actions
    executeTooltip: "Execute agent",
    editTooltip: "Edit agent",
    exportTooltip: "Export agent to .opcode.json",
    deleteTooltip: "Delete agent",

    // Pagination
    pageInfo: "Page {{current}} of {{total}}",

    // Notifications
    createdSuccess: "Agent created successfully",
    updatedSuccess: "Agent updated successfully",
    deletedSuccess: "Agent deleted successfully",
    deleteFailed: "Failed to delete agent",
    importedSuccess: "Agent imported successfully",
    importFailed: "Failed to import agent",
    exportedSuccess: "Agent exported successfully",
    exportFailed: "Failed to export agent",
    loadFailed: "Failed to load agents",

    // Create/Edit form
    createTitle: "Create New Agent",
    editTitle: "Edit Agent",
    basicInfo: "Basic Information",
    agentName: "Agent Name",
    agentIcon: "Agent Icon",
    model: "Model",
    modelClaude4Sonnet: "Claude Sonnet 4.5",
    modelClaude4SonnetDesc: "Latest model with enhanced capabilities",
    modelClaude4Opus: "Claude 4 Opus",
    modelClaude4OpusDesc: "More capable",
    modelSonnet4: "Sonnet 4",
    modelSonnet4Desc: "Previous Sonnet generation",
    modelDefault: "Default",
    modelDefaultDesc: "Use Claude default model",
    customModelId: "Custom Model ID",
    useCustom: "Use Custom",
    taskDescription: "Task Description",
    taskPlaceholder: "What would you like the agent to do?",
    backToAgents: "Back to Agents",

    // Execution
    modelSelection: "Model Selection",
    configureHooks: "Configure Hooks",
    readyToExecute: "Ready to Execute",
    initializing: "Initializing agent...",
    running: "Running",

    // Run status
    completed: "Completed",
    failed: "Failed",
    pending: "Pending",
    stopped: "Stopped",

    // Run list
    noExecutionHistory: "No execution history yet",
    executionHistory: "Execution History",

    // Additional keys
    configureHooksDesc: "Configure hooks that run before and after tool execution",
    systemPromptDesc: "Define the behavior and capabilities of your Claude Code agent",

    // Delete confirmation
    deleteTitle: "Delete Agent",
    deleteConfirmation: "Are you sure you want to delete this agent? This action cannot be undone.",
  },
  prompt: {
    compose: "Compose your prompt",
    model: "Model:",
    thinking: "Thinking:",
    sendMessage: "Send message",
    stopGeneration: "Stop generation",
    sendMessageEnter: "Send message (Enter)",
    minimize: "Minimize",

    // Thinking modes
    thinkingAuto: "Auto",
    thinkingAutoDesc: "Let Claude decide",
    thinkingBasic: "Think",
    thinkingBasicDesc: "Basic reasoning",
    thinkingDeep: "Think Hard",
    thinkingDeepDesc: "Deeper analysis",
    thinkingHarder: "Think Harder",
    thinkingHarderDesc: "Extensive reasoning",
    thinkingUltra: "Ultrathink",
    thinkingUltraDesc: "Maximum computation",

    // Thinking mode warnings
    thinkingModeWarning: "Extended thinking is currently only available in Claude Code interactive mode",
    thinkingModeWarningDetail: "Toggle with Tab key. This feature is temporarily unavailable in GUI, waiting for official CLI parameter support.",
    thinkingModeLearnMore: "Learn more",

    // Models
    modelDefault: "Default",
    modelDefaultDesc: "Use Claude default model",
    modelCustom: "Custom model",
    modelCustomDesc: "Enter a specific engine ID",
    modelCustomPlaceholder: "e.g., claude-sonnet-4-20250514",
    useCustom: "Use",
    modelSonnet: "Claude Sonnet 4.5",
    modelSonnetDesc: "Latest model with enhanced capabilities",
    modelSonnet4: "Sonnet 4",
    modelSonnet4Desc: "Previous Sonnet generation",
    modelOpus: "Claude 4 Opus",
    modelOpusDesc: "More capable, better for complex tasks",
    modelPlan: "Plan Mode (opusplan)",
    modelPlanDesc: "Strategic planning and step-by-step analysis",

    // Additional agent keys for basic agents page
    agentsCount: "Agents",
    historyCount: "History",
    noAgentsYet: "No Agents Yet",
    noAgentsDescription: "Create your first agent to get started",
    noAgentHistory: "No Agent History",
    importAgent: "Import",
    importedAgent: "Imported agent",
    history: "History",
  },
  tools: {
    fileContent: "File content",
    searchFailed: "Search failed",
    noMatches: "No matches found",
    commandFailed: "Command failed",
    commandCompleted: "Command completed",
    inProgress: "In Progress",
    pending: "Pending",
  },
  usage: {
    title: "Usage Dashboard",
    subtitle: "Track your Claude Code usage and costs",
    allTime: "All Time",
    last7Days: "Last 7 Days",
    last30Days: "Last 30 Days",
    totalCost: "Total Cost",
    totalSessions: "Total Sessions",
    totalTokens: "Total Tokens",
    avgCostPerSession: "Avg Cost/Session",
    tokenBreakdown: "Token Breakdown",
    inputTokens: "Input Tokens",
    outputTokens: "Output Tokens",
    cacheWrite: "Cache Write",
    cacheRead: "Cache Read",
    mostUsedModels: "Most Used Models",
    topProjects: "Top Projects",
    overview: "Overview",
    byModel: "By Model",
    byProject: "By Project",
    bySession: "By Session",
    timeline: "Timeline",
    usageByModel: "Usage by Model",
    usageByProject: "Usage by Project",
    usageBySession: "Usage by Session",
    dailyUsage: "Daily Usage",
    sessions: "sessions",
    session: "session",
    totalProjects: "total projects",
    totalSessionsLabel: "total sessions",
    models: "models",
    model: "model",
    showingXofY: "Showing {{start}}-{{end}} of {{total}}",
    pageXofY: "Page {{current}} of {{total}}",
    noUsageData: "No usage data available for the selected period",
    noSessionData: "No session data available for the selected period",
    tryAgain: "Try Again",
    dailyUsageOverTime: "Daily Usage Over Time",
    cost: "Cost",
    tokens: "tokens",
  },
  titlebar: {
    close: "Close",
    minimize: "Minimize",
    maximize: "Maximize",
    agents: "Agents",
    claudeMd: "CLAUDE.md",
    mcpServers: "MCP Servers",
    about: "About",
    usageDashboard: "Usage Dashboard",
    settings: "Settings",
    moreOptions: "More options",
  },
  tabs: {
    chats: "Chats",
    unsavedChanges: "Unsaved changes",
    scrollLeft: "Scroll tabs left",
    scrollRight: "Scroll tabs right",
    newProject: "New project (Ctrl+T)",
    newProjectShort: "New Project",
    noProjectsOpen: "No projects open",
    clickToStartNewProject: "Click to start a new project",
    maxTabsReached: "Maximum tabs reached",
    closeTab: "Close {{title}}",
  },
  colors: {
    background: "Background",
    foreground: "Foreground",
    primary: "Primary",
    card: "Card",
    accent: "Accent",
    destructive: "Destructive",
  },
  placeholders: {
    enterValue: "Enter value...",
    typeMessage: "Type your message...",
    enterUrl: "Enter URL...",
    enterCommand: "Enter shell command...",
    searchFiles: "Search files...",
    searchAgents: "Search agents...",
    searchIcons: "Search icons...",
    searchTodos: "Search todos...",
    searchCommands: "Search commands...",
  },
  analytics: {
    title: "Help Improve opcode",
    helpImprove: "Help improve opcode",
    whatWeCollect: "What we collect:",
    featureUsage: "Feature usage (which tools and commands you use)",
    performanceMetrics: "Performance metrics (app speed and reliability)",
    errorReports: "Error reports (to fix bugs and improve stability)",
    usagePatterns: "General usage patterns (session frequency and duration)",

    privacyTitle: "Your privacy is protected:",
    noPersonalInfo: "No personal information is collected",
    noFileContents: "No file contents, paths, or project names",
    noApiKeys: "No API keys or sensitive data",
    anonymous: "Completely anonymous with random IDs",
    optOut: "You can opt-out anytime in Settings",
    allowAnalytics: "Allow Analytics",
  },
  mcp: {
    title: "MCP Servers",
    subtitle: "Manage Model Context Protocol servers",
    servers: "Servers",
    addServer: "Add Server",
    importExport: "Import/Export",
    configuredServers: "Configured Servers",
    serversConfigured: "{{count}} server configured",
    serversConfigured_other: "{{count}} servers configured",
    refresh: "Refresh",
    noServersConfigured: "No MCP servers configured",
    getStartedMessage: "Add a server to get started with Model Context Protocol",
    running: "Running",
    showFull: "Show full",
    hide: "Hide",
    command: "Command",
    arguments: "Arguments",
    url: "URL",
    environmentVariables: "Environment Variables",
    environmentVariablesCount: "Environment variables: {{count}}",
    copy: "Copy",
    copied: "Copied!",
    scopes: {
      local: "Local (Project-specific)",
      project: "Project (Shared via .mcp.json)",
      user: "User (All projects)",
    },
    messages: {
      serverAdded: "MCP server added successfully!",
      serverRemoved: "Server \"{{name}}\" removed successfully!",
      importSuccess: "Successfully imported {{count}} server!",
      importSuccess_other: "Successfully imported {{count}} servers!",
      importPartial: "Imported {{imported}} server, {{failed}} failed",
      importPartial_other: "Imported {{imported}} servers, {{failed}} failed",
      loadError: "Failed to load MCP servers. Make sure Claude Code is installed.",
    },
  },
  claudeVersion: {
    title: "Claude Installation",
    description: "Select your preferred Claude installation",
    installationTypes: {
      system: "System",
      custom: "Custom"
    },
    placeholder: "Choose Claude installation",
    pathLabel: "Path",
    customPath: "Custom path...",
    unknownVersion: "Unknown version",
    versionUnknown: "Version unknown",
    selectInstallation: "Select Claude installation",
    saving: "Saving...",
    saveSelection: "Save Selection",
    noInstallationsFound: "No Installations Found",
    loadFailed: "Failed to load Claude installations",
    retry: "Retry"
  },
  checkpoint: {
    title: "Checkpoint Settings",
    subtitle: "Manage session checkpoints and recovery",
    tabs: {
      general: "General",
      storage: "Storage & Cleanup"
    },
    autoCheckpoint: "Automatic Checkpoints",
    autoCheckpointDesc: "Automatically create checkpoints based on the selected strategy",
    strategy: "Checkpoint Strategy",
    strategyDesc: "When to create checkpoints",
    strategyOptions: {
      manual: "Manual Only",
      perPrompt: "After Each Prompt",
      perToolUse: "After Tool Use",
      smart: "Smart (Recommended)"
    },
    strategyDescriptions: {
      manual: "Checkpoints will only be created manually",
      perPrompt: "A checkpoint will be created after each user prompt",
      perToolUse: "A checkpoint will be created after each tool use",
      smart: "Checkpoints will be created after destructive operations"
    },
    experimentalFeature: "Experimental Feature",
    experimentalWarning: "Checkpointing may affect directory structure or cause data loss. Use with caution.",
    keepCount: "Keep Recent Checkpoints",
    keepCountDesc: "Number of checkpoints to keep",
    totalCheckpoints: "Total checkpoints:",
    management: "Storage Management",
    storageStats: {
      totalSize: "Total Size",
      contentPool: "Content Pool",
      oldest: "Oldest",
      newest: "Newest"
    },
    cleanupOld: "Clean Up",
    cleanupOldDesc: "Remove old checkpoints, keeping only the most recent",
    autoCleanup: "Auto-cleanup Expired Checkpoints",
    autoCleanupDesc: "Automatically remove checkpoints older than retention period",
    retentionPeriod: "Retention Period (Days)",
    cleanNow: "Clean Now",
    cleaning: "Cleaning...",
    retentionDesc: "Checkpoints older than {{days}} days will be automatically removed (aligns with official Claude Code Rewind)",
    saveSettings: "Save Settings",
    saving: "Saving...",
    loadFailed: "Failed to load checkpoint settings",
    saveFailed: "Failed to save checkpoint settings",
    saveSuccess: "Settings saved successfully",
    cleanupFailed: "Failed to cleanup checkpoints"
  },
  webview: {
    preview: "Preview",
    invalidUrl: "Invalid URL",
    goBack: "Go back",
    goForward: "Go forward",
    webPreview: "Web preview",
  },
  errors: {
    somethingWrong: "Something went wrong",
    failedToLoad: "Failed to load",
    failedToSave: "Failed to save",
    failedToDelete: "Failed to delete",
    failedToCreate: "Failed to create",
    failedToUpdate: "Failed to update",
    failedToImport: "Failed to import",
    failedToExport: "Failed to export",
    failedToLoadProjects: "Failed to load projects",
    failedToLoadSessions: "Failed to load sessions",
    failedToCreateProject: "Failed to create project for the selected directory",
    unknownError: "Unknown error",
    runNotFound: "Run not found",
    anErrorOccurred: "An error occurred",
    executionStopped: "Execution stopped by user",
    executionFailed: "Agent execution failed",
    executionCancelled: "Agent execution was cancelled",
    noRunIdAvailable: "No run ID available to stop",
    failedToStop: "Failed to stop",
    cannotReadProperties: "Cannot read properties of undefined",
    apiNotAvailable: "API is not available in this environment",
    failedToLoadHooks: "Failed to load hooks configuration",
    failedToSaveHooks: "Failed to save hooks configuration",
    failedToLoadDetails: "Failed to load execution details",
    failedToImportAgent: "Failed to import agent",
    failedToExportAgent: "Failed to export agent",
    pleaseSelectInstallation: "Please select a Claude installation",
    failedToSaveBinaryPath: "Failed to save Claude binary path",
    failedToSendPrompt: "Failed to send prompt",
    failedToLoadHistory: "Failed to load session history",
    pleaseSelectDirectory: "Please select a project directory first",
    failedToForkCheckpoint: "Failed to fork checkpoint",
    loadingHistory: "Loading session history...",
    initializingClaude: "Initializing Claude Code...",
    usingThinkingModePrefix: "Using",
    usingThinkingModeSuffix: "mode - this may take longer than usual...",
    processingWithModePrefix: "Processing with",
    processingWithModeSuffix: "mode…",
    thinkingModeTakesLonger: "(this may take longer)",
    validating: "Validating...",
    saveSelection: "Save Selection",
    noInstallationsFound: "No Installations Found",
    noCommandsFound: "No commands found",
    loadingTimeline: "Loading timeline...",
    noCheckpointsYet: "No checkpoints yet",
    searchFailed: "Search failed",
    noMatchesFound: "No matches found",
    failedToLoadTimeline: "Failed to load timeline",
    failedToCreateCheckpoint: "Failed to create checkpoint",
    failedToRestoreCheckpoint: "Failed to restore checkpoint",
    failedToCompareCheckpoints: "Failed to compare checkpoints",
    failedToCancelExecution: "Failed to cancel execution",
    failedToParseMessage: "Failed to parse message",
    failedToCheckActiveSessions: "Failed to check for active sessions",
  },
  status: {
    ready: "Ready to start coding",
    thinking: "Claude is thinking...",
    saving: "Saving...",
    loading: "Loading...",
    initializing: "Initializing...",
    processing: "Processing...",
    completed: "Completed",
    failed: "Failed",
    stopped: "Stopped",
    cancelled: "Cancelled",
  },
  startup: {
    loadingMessage: "Preparing workspace...",
  },
};

export type TranslationResources = typeof en;
export default en;
